# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type WeaponProfile {
  id: ID!
  name: String
  range: String
  type: String
  shots: String
  AP: String
  dmg: String
  strength: String
  notes: String
  profile: String
  units(
    where: UnitWhereInput! = {}
    orderBy: [UnitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Unit!]
  unitsCount(where: UnitWhereInput! = {}): Int
}

input WeaponProfileWhereUniqueInput {
  id: ID
  name: String
}

input WeaponProfileWhereInput {
  AND: [WeaponProfileWhereInput!]
  OR: [WeaponProfileWhereInput!]
  NOT: [WeaponProfileWhereInput!]
  id: IDFilter
  name: StringFilter
  range: StringFilter
  type: StringFilter
  shots: StringFilter
  AP: StringFilter
  dmg: StringFilter
  strength: StringFilter
  notes: StringFilter
  units: UnitManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UnitManyRelationFilter {
  every: UnitWhereInput
  some: UnitWhereInput
  none: UnitWhereInput
}

input WeaponProfileOrderByInput {
  id: OrderDirection
  name: OrderDirection
  range: OrderDirection
  type: OrderDirection
  shots: OrderDirection
  AP: OrderDirection
  dmg: OrderDirection
  strength: OrderDirection
  notes: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input WeaponProfileUpdateInput {
  name: String
  range: String
  type: String
  shots: String
  AP: String
  dmg: String
  strength: String
  notes: String
  units: UnitRelateToManyForUpdateInput
}

input UnitRelateToManyForUpdateInput {
  disconnect: [UnitWhereUniqueInput!]
  set: [UnitWhereUniqueInput!]
  create: [UnitCreateInput!]
  connect: [UnitWhereUniqueInput!]
}

input WeaponProfileUpdateArgs {
  where: WeaponProfileWhereUniqueInput!
  data: WeaponProfileUpdateInput!
}

input WeaponProfileCreateInput {
  name: String
  range: String
  type: String
  shots: String
  AP: String
  dmg: String
  strength: String
  notes: String
  units: UnitRelateToManyForCreateInput
}

input UnitRelateToManyForCreateInput {
  create: [UnitCreateInput!]
  connect: [UnitWhereUniqueInput!]
}

type UnitStat {
  id: ID!
  name: String
  M: String
  WS: String
  BS: String
  W: String
  S: String
  T: String
  A: String
  Sv: String
  Ld: String
  statLine: String
  units(
    where: UnitWhereInput! = {}
    orderBy: [UnitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Unit!]
  unitsCount(where: UnitWhereInput! = {}): Int
}

input UnitStatWhereUniqueInput {
  id: ID
  name: String
}

input UnitStatWhereInput {
  AND: [UnitStatWhereInput!]
  OR: [UnitStatWhereInput!]
  NOT: [UnitStatWhereInput!]
  id: IDFilter
  name: StringFilter
  M: StringFilter
  WS: StringFilter
  BS: StringFilter
  W: StringFilter
  S: StringFilter
  T: StringFilter
  A: StringFilter
  Sv: StringFilter
  Ld: StringFilter
  units: UnitManyRelationFilter
}

input UnitStatOrderByInput {
  id: OrderDirection
  name: OrderDirection
  M: OrderDirection
  WS: OrderDirection
  BS: OrderDirection
  W: OrderDirection
  S: OrderDirection
  T: OrderDirection
  A: OrderDirection
  Sv: OrderDirection
  Ld: OrderDirection
}

input UnitStatUpdateInput {
  name: String
  M: String
  WS: String
  BS: String
  W: String
  S: String
  T: String
  A: String
  Sv: String
  Ld: String
  units: UnitRelateToManyForUpdateInput
}

input UnitStatUpdateArgs {
  where: UnitStatWhereUniqueInput!
  data: UnitStatUpdateInput!
}

input UnitStatCreateInput {
  name: String
  M: String
  WS: String
  BS: String
  W: String
  S: String
  T: String
  A: String
  Sv: String
  Ld: String
  units: UnitRelateToManyForCreateInput
}

type Unit {
  id: ID!
  name: String
  details: String
  stats: UnitStat
  weapons(
    where: WeaponProfileWhereInput! = {}
    orderBy: [WeaponProfileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [WeaponProfile!]
  weaponsCount(where: WeaponProfileWhereInput! = {}): Int
  keywords(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  keywordsCount(where: TagWhereInput! = {}): Int
  points: Int
  abilities(
    where: RuleWhereInput! = {}
    orderBy: [RuleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rule!]
  abilitiesCount(where: RuleWhereInput! = {}): Int
  role: UnitRoleType
  armies(
    where: ArmyListWhereInput! = {}
    orderBy: [ArmyListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ArmyList!]
  armiesCount(where: ArmyListWhereInput! = {}): Int
}

enum UnitRoleType {
  HQ
  Flyer
  Elite
  Troop
  Drone
  Transport
  Heavy
  Fast
  misc
}

input UnitWhereUniqueInput {
  id: ID
  name: String
}

input UnitWhereInput {
  AND: [UnitWhereInput!]
  OR: [UnitWhereInput!]
  NOT: [UnitWhereInput!]
  id: IDFilter
  name: StringFilter
  details: StringFilter
  stats: UnitStatWhereInput
  weapons: WeaponProfileManyRelationFilter
  keywords: TagManyRelationFilter
  points: IntFilter
  abilities: RuleManyRelationFilter
  role: UnitRoleTypeNullableFilter
  armies: ArmyListManyRelationFilter
}

input WeaponProfileManyRelationFilter {
  every: WeaponProfileWhereInput
  some: WeaponProfileWhereInput
  none: WeaponProfileWhereInput
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input IntFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntFilter
}

input RuleManyRelationFilter {
  every: RuleWhereInput
  some: RuleWhereInput
  none: RuleWhereInput
}

input UnitRoleTypeNullableFilter {
  equals: UnitRoleType
  in: [UnitRoleType!]
  notIn: [UnitRoleType!]
  not: UnitRoleTypeNullableFilter
}

input ArmyListManyRelationFilter {
  every: ArmyListWhereInput
  some: ArmyListWhereInput
  none: ArmyListWhereInput
}

input UnitOrderByInput {
  id: OrderDirection
  name: OrderDirection
  details: OrderDirection
  points: OrderDirection
  role: OrderDirection
}

input UnitUpdateInput {
  name: String
  details: String
  stats: UnitStatRelateToOneForUpdateInput
  weapons: WeaponProfileRelateToManyForUpdateInput
  keywords: TagRelateToManyForUpdateInput
  points: Int
  abilities: RuleRelateToManyForUpdateInput
  role: UnitRoleType
  armies: ArmyListRelateToManyForUpdateInput
}

input UnitStatRelateToOneForUpdateInput {
  create: UnitStatCreateInput
  connect: UnitStatWhereUniqueInput
  disconnect: Boolean
}

input WeaponProfileRelateToManyForUpdateInput {
  disconnect: [WeaponProfileWhereUniqueInput!]
  set: [WeaponProfileWhereUniqueInput!]
  create: [WeaponProfileCreateInput!]
  connect: [WeaponProfileWhereUniqueInput!]
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input RuleRelateToManyForUpdateInput {
  disconnect: [RuleWhereUniqueInput!]
  set: [RuleWhereUniqueInput!]
  create: [RuleCreateInput!]
  connect: [RuleWhereUniqueInput!]
}

input ArmyListRelateToManyForUpdateInput {
  disconnect: [ArmyListWhereUniqueInput!]
  set: [ArmyListWhereUniqueInput!]
  create: [ArmyListCreateInput!]
  connect: [ArmyListWhereUniqueInput!]
}

input UnitUpdateArgs {
  where: UnitWhereUniqueInput!
  data: UnitUpdateInput!
}

input UnitCreateInput {
  name: String
  details: String
  stats: UnitStatRelateToOneForCreateInput
  weapons: WeaponProfileRelateToManyForCreateInput
  keywords: TagRelateToManyForCreateInput
  points: Int
  abilities: RuleRelateToManyForCreateInput
  role: UnitRoleType
  armies: ArmyListRelateToManyForCreateInput
}

input UnitStatRelateToOneForCreateInput {
  create: UnitStatCreateInput
  connect: UnitStatWhereUniqueInput
}

input WeaponProfileRelateToManyForCreateInput {
  create: [WeaponProfileCreateInput!]
  connect: [WeaponProfileWhereUniqueInput!]
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input RuleRelateToManyForCreateInput {
  create: [RuleCreateInput!]
  connect: [RuleWhereUniqueInput!]
}

input ArmyListRelateToManyForCreateInput {
  create: [ArmyListCreateInput!]
  connect: [ArmyListWhereUniqueInput!]
}

type Rule {
  id: ID!
  name: String
  displayName: String
  hideName: Boolean
  details: String
}

input RuleWhereUniqueInput {
  id: ID
  name: String
}

input RuleWhereInput {
  AND: [RuleWhereInput!]
  OR: [RuleWhereInput!]
  NOT: [RuleWhereInput!]
  id: IDFilter
  name: StringFilter
  displayName: StringFilter
  hideName: BooleanFilter
  details: StringFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input RuleOrderByInput {
  id: OrderDirection
  name: OrderDirection
  displayName: OrderDirection
  hideName: OrderDirection
  details: OrderDirection
}

input RuleUpdateInput {
  name: String
  displayName: String
  hideName: Boolean
  details: String
}

input RuleUpdateArgs {
  where: RuleWhereUniqueInput!
  data: RuleUpdateInput!
}

input RuleCreateInput {
  name: String
  displayName: String
  hideName: Boolean
  details: String
}

type Tag {
  id: ID!
  name: String
}

input TagWhereUniqueInput {
  id: ID
  name: String
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
}

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  name: String
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Stratagem {
  id: ID!
  name: String
  armies(
    where: ArmyListWhereInput! = {}
    orderBy: [ArmyListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ArmyList!]
  armiesCount(where: ArmyListWhereInput! = {}): Int
  details: String
  CP: String
}

input StratagemWhereUniqueInput {
  id: ID
  name: String
}

input StratagemWhereInput {
  AND: [StratagemWhereInput!]
  OR: [StratagemWhereInput!]
  NOT: [StratagemWhereInput!]
  id: IDFilter
  name: StringFilter
  armies: ArmyListManyRelationFilter
  details: StringFilter
  CP: StringFilter
}

input StratagemOrderByInput {
  id: OrderDirection
  name: OrderDirection
  details: OrderDirection
  CP: OrderDirection
}

input StratagemUpdateInput {
  name: String
  armies: ArmyListRelateToManyForUpdateInput
  details: String
  CP: String
}

input StratagemUpdateArgs {
  where: StratagemWhereUniqueInput!
  data: StratagemUpdateInput!
}

input StratagemCreateInput {
  name: String
  armies: ArmyListRelateToManyForCreateInput
  details: String
  CP: String
}

type ArmyList {
  id: ID!
  name: String
  description: String
  notes: String
  stratagems(
    where: StratagemWhereInput! = {}
    orderBy: [StratagemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Stratagem!]
  stratagemsCount(where: StratagemWhereInput! = {}): Int
  units(
    where: UnitWhereInput! = {}
    orderBy: [UnitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Unit!]
  unitsCount(where: UnitWhereInput! = {}): Int
  armyRules(
    where: RuleWhereInput! = {}
    orderBy: [RuleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rule!]
  armyRulesCount(where: RuleWhereInput! = {}): Int
}

input ArmyListWhereUniqueInput {
  id: ID
}

input ArmyListWhereInput {
  AND: [ArmyListWhereInput!]
  OR: [ArmyListWhereInput!]
  NOT: [ArmyListWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  notes: StringFilter
  stratagems: StratagemManyRelationFilter
  units: UnitManyRelationFilter
  armyRules: RuleManyRelationFilter
}

input StratagemManyRelationFilter {
  every: StratagemWhereInput
  some: StratagemWhereInput
  none: StratagemWhereInput
}

input ArmyListOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  notes: OrderDirection
}

input ArmyListUpdateInput {
  name: String
  description: String
  notes: String
  stratagems: StratagemRelateToManyForUpdateInput
  units: UnitRelateToManyForUpdateInput
  armyRules: RuleRelateToManyForUpdateInput
}

input StratagemRelateToManyForUpdateInput {
  disconnect: [StratagemWhereUniqueInput!]
  set: [StratagemWhereUniqueInput!]
  create: [StratagemCreateInput!]
  connect: [StratagemWhereUniqueInput!]
}

input ArmyListUpdateArgs {
  where: ArmyListWhereUniqueInput!
  data: ArmyListUpdateInput!
}

input ArmyListCreateInput {
  name: String
  description: String
  notes: String
  stratagems: StratagemRelateToManyForCreateInput
  units: UnitRelateToManyForCreateInput
  armyRules: RuleRelateToManyForCreateInput
}

input StratagemRelateToManyForCreateInput {
  create: [StratagemCreateInput!]
  connect: [StratagemWhereUniqueInput!]
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createWeaponProfile(data: WeaponProfileCreateInput!): WeaponProfile
  createWeaponProfiles(data: [WeaponProfileCreateInput!]!): [WeaponProfile]
  updateWeaponProfile(
    where: WeaponProfileWhereUniqueInput!
    data: WeaponProfileUpdateInput!
  ): WeaponProfile
  updateWeaponProfiles(data: [WeaponProfileUpdateArgs!]!): [WeaponProfile]
  deleteWeaponProfile(where: WeaponProfileWhereUniqueInput!): WeaponProfile
  deleteWeaponProfiles(
    where: [WeaponProfileWhereUniqueInput!]!
  ): [WeaponProfile]
  createUnitStat(data: UnitStatCreateInput!): UnitStat
  createUnitStats(data: [UnitStatCreateInput!]!): [UnitStat]
  updateUnitStat(
    where: UnitStatWhereUniqueInput!
    data: UnitStatUpdateInput!
  ): UnitStat
  updateUnitStats(data: [UnitStatUpdateArgs!]!): [UnitStat]
  deleteUnitStat(where: UnitStatWhereUniqueInput!): UnitStat
  deleteUnitStats(where: [UnitStatWhereUniqueInput!]!): [UnitStat]
  createUnit(data: UnitCreateInput!): Unit
  createUnits(data: [UnitCreateInput!]!): [Unit]
  updateUnit(where: UnitWhereUniqueInput!, data: UnitUpdateInput!): Unit
  updateUnits(data: [UnitUpdateArgs!]!): [Unit]
  deleteUnit(where: UnitWhereUniqueInput!): Unit
  deleteUnits(where: [UnitWhereUniqueInput!]!): [Unit]
  createRule(data: RuleCreateInput!): Rule
  createRules(data: [RuleCreateInput!]!): [Rule]
  updateRule(where: RuleWhereUniqueInput!, data: RuleUpdateInput!): Rule
  updateRules(data: [RuleUpdateArgs!]!): [Rule]
  deleteRule(where: RuleWhereUniqueInput!): Rule
  deleteRules(where: [RuleWhereUniqueInput!]!): [Rule]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createStratagem(data: StratagemCreateInput!): Stratagem
  createStratagems(data: [StratagemCreateInput!]!): [Stratagem]
  updateStratagem(
    where: StratagemWhereUniqueInput!
    data: StratagemUpdateInput!
  ): Stratagem
  updateStratagems(data: [StratagemUpdateArgs!]!): [Stratagem]
  deleteStratagem(where: StratagemWhereUniqueInput!): Stratagem
  deleteStratagems(where: [StratagemWhereUniqueInput!]!): [Stratagem]
  createArmyList(data: ArmyListCreateInput!): ArmyList
  createArmyLists(data: [ArmyListCreateInput!]!): [ArmyList]
  updateArmyList(
    where: ArmyListWhereUniqueInput!
    data: ArmyListUpdateInput!
  ): ArmyList
  updateArmyLists(data: [ArmyListUpdateArgs!]!): [ArmyList]
  deleteArmyList(where: ArmyListWhereUniqueInput!): ArmyList
  deleteArmyLists(where: [ArmyListWhereUniqueInput!]!): [ArmyList]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  weaponProfiles(
    where: WeaponProfileWhereInput! = {}
    orderBy: [WeaponProfileOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [WeaponProfile!]
  weaponProfile(where: WeaponProfileWhereUniqueInput!): WeaponProfile
  weaponProfilesCount(where: WeaponProfileWhereInput! = {}): Int
  unitStats(
    where: UnitStatWhereInput! = {}
    orderBy: [UnitStatOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [UnitStat!]
  unitStat(where: UnitStatWhereUniqueInput!): UnitStat
  unitStatsCount(where: UnitStatWhereInput! = {}): Int
  units(
    where: UnitWhereInput! = {}
    orderBy: [UnitOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Unit!]
  unit(where: UnitWhereUniqueInput!): Unit
  unitsCount(where: UnitWhereInput! = {}): Int
  rules(
    where: RuleWhereInput! = {}
    orderBy: [RuleOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Rule!]
  rule(where: RuleWhereUniqueInput!): Rule
  rulesCount(where: RuleWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  stratagems(
    where: StratagemWhereInput! = {}
    orderBy: [StratagemOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Stratagem!]
  stratagem(where: StratagemWhereUniqueInput!): Stratagem
  stratagemsCount(where: StratagemWhereInput! = {}): Int
  armyLists(
    where: ArmyListWhereInput! = {}
    orderBy: [ArmyListOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ArmyList!]
  armyList(where: ArmyListWhereUniqueInput!): ArmyList
  armyListsCount(where: ArmyListWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
